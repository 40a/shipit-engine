class ChunkPoller
  INTERVAL = 1000
  MAX_RETRIES = 15
  STICKY_SCROLL_TOLERENCE = 200
  NOTIFICATION_IMAGES =
    success: '<%= image_path "deploy_success.jpg" %>'
    failed: '<%= image_path "deploy_failed.jpg" %>'
    error: '<%= image_path "deploy_error.jpg" %>'

  @init: ->
    pollUrl = $('code').data('next-chunks-url')
    tasksView = new DeployTasksView($('.deploy-tasks'))
    poller = new ChunkPoller($('body'), pollUrl, tasksView)
    $('code').each ->
      $(this).html(poller.colorize(this.innerHTML))
      tasksView.update(this.innerHTML)

    poller.start() if pollUrl

  constructor: ($body, @pollUrl, @tasksView) ->
    @$status = $body.find('[data-deploy-status]')
    @$code = $body.find('code')
    @$body = $body
    @$window = $(window)
    @initialScroll = true
    @deployShortSha = $body.find('.short-sha').text()
    @stream = new AnsiStream()

  poll: =>
    jQuery.ajax @pollUrl,
      success: @update
      error: @error

  error: (response) =>
    (@retries ||= 0)
    @start() if 600 > response.status > 500 && (@retries += 1) < MAX_RETRIES

  update: (response) =>
    @retries = 0
    @pollUrl = response.url
    @restoreBrowserScroll =>
      @appendChunks(response.chunks)
    @updateDeployStatus(response.deploy)
    if @deployIsFinished(response.deploy)
      @notifyFinishedDeploy(response.deploy)
    else
      @start()

  restoreBrowserScroll: (callback) ->
    wasScrolledToBottom = @isScrolledToBottom()
    callback()
    if wasScrolledToBottom
      @$window.scrollTop(@codeBottomPosition() - @$window.height() + 50)

  isScrolledToBottom: ->
    if @initialScroll
      @initialScroll = (window.scrollY == 0)
      true
    else
      @viewportBottomPosition() >= @codeBottomPosition() - STICKY_SCROLL_TOLERENCE and \
      @viewportBottomPosition() < @codeBottomPosition() + STICKY_SCROLL_TOLERENCE

  viewportBottomPosition: ->
    window.scrollY + @$window.height()

  codeBottomPosition: ->
    @$code.position().top + @$code.height()

  start: ->
    setTimeout(@poll, INTERVAL)

  updateDeployStatus: (deploy) ->
    @$status.attr('data-deploy-status', deploy.status)

  deployIsFinished: (deploy) ->
    @$status.attr('data-deploy-status') not in ['pending', 'running']

  notifyFinishedDeploy: (deploy) ->
    return unless $.notifyCheck() == $.NOTIFY_ALLOWED
    $.notify(
      @notificationURL(deploy),
      @notificationTitle(deploy),
      @notificationMessage(deploy)
    )

  notificationURL: (deploy) ->
    NOTIFICATION_IMAGES[deploy.status]

  notificationTitle: (deploy) ->
    $('.repo-name').attr('data-repo-full-name')

  notificationMessage: (deploy) ->
    switch deploy.status
      when 'success'
        'Your deploy of ' + @deployShortSha + ' was successful!'
      when 'failed'
        'Your deploy of ' + @deployShortSha + ' failed.'
      when 'error'
        'Error while deploying ' + @deployShortSha + ' .'
      else
        'Your deploy of ' + @deployShortSha + ' ended with status: ' + deploy.status

  appendChunks: (chunks) ->
    return unless chunks.length

    text = chunks.map((c) -> c.text).join('')
    @tasksView.update(text)
    @$code.append(@colorize(text))

  colorize: (text) ->
    @stream.process(text)

jQuery ->
  ChunkPoller.init()

class DeployTasksView
  constructor: (@container) ->
    @tasks = {}

  getTask: (type, id) ->
    if @tasks[id] != undefined
      return @tasks[id]
    @tasks[id] = new type(@container)

  logSearch: (text, re, callback) ->
    re.lastIndex = 0
    while (res = re.exec(text)) != null
      callback(res)
    null

  update: (text) ->
    @logSearch text, /^.+(sb\d+).chi.shopify.com\] I.+\[(\d+)\/(\d+)\] Restarting/gm, (match) => 
      task = @getTask(RestartTaskView, "restart-"+match[1])
      task.update(match[1], match[2], match[3])
    @logSearch text, /^.+(sb\d+).chi.shopify.com\] I.+\[(\d+)\/(\d+)\] Unable to restart/gm, (match) => 
      task = @getTask(RestartTaskView, "restart-"+match[1])
      task.fail()
    null


class RestartTaskView
  nodeName: ""
  containersTotal: 0
  containersUp: 0
  prevUp: 0

  constructor: (@container) ->
    @elem = $("<div class='task-restart'><span class='task-restart-text'><span class='task-restart-node'></span></span><span class='task-restart-boxes'></span></div>")
    @elem.appendTo(@container)

  update: (@nodeName, containersUp, @containersTotal) ->
    @prevUp = @containersUp
    @containersUp = containersUp

    @elem.find('.task-restart-node').html(@nodeName)
    boxes = document.createDocumentFragment();
    for i in [1..(+@containersTotal)]
      status = if i <= @containersUp then "up" else "neutral"
      box = document.createElement("span")
      box.className = "task-restart-box box-"+status
      boxes.appendChild(box)
    @elem.find('.task-restart-boxes').empty().append(boxes)

  fail: ->
    # if something fails the last couple containers didn't actually restart
    @update(@nodeName, @prevUp, @containersTotal)
    @elem.addClass("task-failed")

